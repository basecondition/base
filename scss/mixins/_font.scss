// @method: font-face
// @forked: git.io/1dMSeg
// @usage: @include font-face(SourceSansPro, '/fonts/Source_Sans_Pro/SourceSansPro-Italic', normal, italic);
//         @include font-face(SourceSansPro, '/fonts/Source_Sans_Pro/SourceSansPro-Regular');
//         @include font-face(SourceSansPro, '/fonts/Source_Sans_Pro/SourceSansPro-Bold', bold);
//         @include font-face(SourceSansPro, '/fonts/Source_Sans_Pro/SourceSansPro-Italic', normal, italic);
// Order of the includes matters, and it is: normal, bold, italic, bold+italic.

@mixin font-face($font-family, $file-path, $weight: normal, $style: normal, $file-formats: eot woff2 woff ttf svg) {
    @font-face {
        font-family: $font-family;
        font-weight: $weight;
        font-style: $style;

        src: font-source-declaration($font-family, $file-path, $file-formats);
    }
}

// Font feature settings mixin and property default.
// @method: font-feature-settings
// @usage: @include font-feature-settings("liga");
//         @include font-feature-settings("lnum" false);
//         @include font-feature-settings("pnum" 1, "kern" 0);
//         @include font-feature-settings("ss01", "ss02");

@mixin font-feature-settings($settings...) {
    @if length($settings) == 0 {
        $settings: none;
    }
    @include prefixer(font-feature-settings, $settings, webkit moz ms spec);
}

// @method: font-size
// @usage: @include font-size(12px, "!important");
// @syntax: em|px|%

@mixin font-size($size, $suffix: '') {
    @if (unit($size) == px) {
        font-size: $size #{$suffix};
        font-size: rem($size) #{$suffix};
    } @else if (unit($size) == em or unit($size) == rem) {
        font-size: px($size) #{$suffix};
        font-size: strip-units($size) * 1rem #{$suffix};
    } @else {
        font-size: $size #{$suffix};
    }
}

// @method: line-height
// @usage: @include line-height(12px);
// @syntax: em|px|%

@mixin line-height($size, $suffix: '') {
    @if (unit($size) == px) {
        line-height: $size #{$suffix};
        line-height: rem($size) #{$suffix};
    } @else if (unit($size) == em or unit($size) == rem) {
        line-height: px($size) #{$suffix};
        line-height: strip-units($size) * 1rem #{$suffix};
    } @else {
        line-height: $size #{$suffix};
    }
}

// @method: shorthand
// @usage: @include shorthand(12px, 120%, normal);

@mixin shorthand($size: 14px, $line-height: false, $weight: flase, $suffix: '') {
    @include font-size($size, $suffix);
    @if $line-height {
        @include line-height($line-height, $suffix);
    }
    @if $weight {
        font-weight: $weight, $suffix;
    }
}

// @method: smoothing
// @usage: @include smoothing(subpixel-antialiased);
// @syntax: off|antialiased|subpixel-antialiased

@mixin smoothing($smooth) {
    @if ($smooth == 'subpixel-antialiased') {
        -webkit-font-smoothing: $smooth;
        -moz-osx-font-smoothing: auto;
    } @else {
        -webkit-font-smoothing: $smooth;
        -moz-osx-font-smoothing: grayscale;
    }
}
